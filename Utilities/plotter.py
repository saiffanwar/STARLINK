# from geometry import Locations, Phases, fetch_curr, calcDistanceBetween
from network import calcPath
import pickle as pck
import numpy as np
from matplotlib import pyplot as plt
from matplotlib.dates import date2num

import pickle as pck
from sim_utils import Phases, Locations, calcGCR
from tqdm import tqdm
import seaborn as sns
import datetime


plt.style.use('classic')
plt.rc('font',**{'family':'serif','serif':['Times']})
# plt.rc('text', usetex=True)

def plotRTT(phasenum, limit=180):
    # from sim_ops import phase
    USABLE_WIDTH_mm = 195
    USABLE_HEIGHT_mm = 100
    YANK_RATIO = 0.0393701
    USABLE_WIDTH_YANK = USABLE_WIDTH_mm*YANK_RATIO
    USABLE_HEIGHT_YANK = USABLE_HEIGHT_mm*YANK_RATIO
    SUBPLOT_FONT_SIZE = 12

    fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(USABLE_WIDTH_YANK, USABLE_HEIGHT_YANK), tight_layout=True)
    # ax.set_title('RTT between '+loc1+' and '+loc2+' using Starlink Phase 1 satellites')
    ax.set_ylabel('Normalised Round Trip Time', fontsize=SUBPLOT_FONT_SIZE)
    # ax[1].set_xlabel('Time (s)', fontsize=SUBPLOT_FONT_SIZE)
    ax.set_ylim(bottom=0.4,top=1.7)
    ax.set_xlim(0,limit)
    # ax[1].set_ylabel('Hop Count', fontsize=SUBPLOT_FONT_SIZE)
    # ax.set_title('(a)')
    # ax.title.set_position([-0.10, 0.5])
    # ax[1].set_title('(b)')
    # ax[1].title.set_position([-0.10, 0.5])
    sources = ['New York City', 'San Francisco', 'London']
    destinations = ['London', 'London', 'Singapore']
    colours = ['blue','red', (192/255,128/255,255/255)]
    leg = ['NYC-LON', 'SFO-LON', 'LON-SIN']
    internetlatencys = [0.073219, 0.133547, 0.160389]
    for i in range(0,3):
        source = Locations[sources[i]]
        destination = Locations[destinations[i]]
        GCRLatency = 2*calcGCR(source, destination)/(300E6/1.47)
        print(GCRLatency)
        rtts = []
        rts = []
        hops = []
        print('Calculating RTTs: ' +str(sources[i])+' -> '+str(destinations[i]))
        calc_times = []
        times = np.arange(0,limit,1)
        for j in tqdm(times):
            # try:
                path_len, path, positions, time_difference, tot_time = calcPath(phasenum, source, destination, j)
                # rtts.append(np.round(2*(rtt/300E6),3))
                # if j%10==0:
                calc_times.append(tot_time)
                rtts.append(np.round(2*(path_len/300E6)/GCRLatency,3))
                rts.append(path_len/300E6)
                hops.append(int(len(path)+2))
            # except:
            #     times = np.delete(times, j)
            #     pass
        # print(calc_times)
        print(times[rtts.index(max(rtts))])
        print(times[rtts.index(min(rtts))])
        print(rtts)
        ax.hlines(internetlatencys[i]/GCRLatency, xmin=0, xmax=limit, color=colours[i], linestyle='dashed', linewidth=2, label = leg[i]+' - Terrestrial')
        # ax[1].plot(times, hops, color=colours[i], linewidth=2)
        ax.hlines(1, xmin=0, xmax=limit, color='grey', linestyle='dashed', linewidth=1, label='_nolegend_')
        ax.plot(times, rtts, color=colours[i], linewidth=2, label=leg[i]+' - Satellites')
        # ax[1].plot(np.arange(0,180,1), hops)
    # ax.legend(['NYC->LON - Satellites', 'NYC->LON - Terrestrial', 'SFO-LON - Satellites','SFO-LON - Terrestrial', 'LON-SIN - Satellites', 'LON-SIN - Terrestrial'], loc='center', bbox_to_anchor=(0.5, 1.03), ncol=3)
    ax.legend(ncol=1, fontsize=SUBPLOT_FONT_SIZE)
    plt.savefig('figs/exp2/rttexp2.pdf')
    plt.show()

def plotbothphases(phasenum, limit=10):
    # from sim_ops import phase
    USABLE_WIDTH_mm = 195
    USABLE_HEIGHT_mm = 150
    YANK_RATIO = 0.0393701
    USABLE_WIDTH_YANK = USABLE_WIDTH_mm*YANK_RATIO
    USABLE_HEIGHT_YANK = USABLE_HEIGHT_mm*YANK_RATIO
    SUBPLOT_FONT_SIZE = 12

    fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(USABLE_WIDTH_YANK, USABLE_HEIGHT_YANK), tight_layout=True)
    # ax.set_title('RTT between '+loc1+' and '+loc2+' using Starlink Phase 1 satellites')
    ax.set_ylabel('Optimal Path RTT (ms)', fontsize=SUBPLOT_FONT_SIZE)
    ax.set_xlabel('Time (s)', fontsize=SUBPLOT_FONT_SIZE)
    ax.set_ylim(bottom=40,top=120)
    ax.set_xlim(0,limit)
    # ax[1].set_ylabel('Hop Count', fontsize=SUBPLOT_FONT_SIZE)
    # ax.set_title('(a)')
    # ax.title.set_position([-0.10, 0.5])
    # ax[1].set_title('(b)')
    # ax[1].title.set_position([-0.10, 0.5])
    sources = ['NYC', 'SFO', 'LDN']
    destinations = ['LDN', 'LDN', 'SIN']
    colours = ['blue','red', (192/255,128/255,255/255)]
    leg = ['NYC-LON', 'SFO-LON', 'LON-SIN']
    internetlatencys = [0.073219, 0.133547, 0.160389]
    for phasenum, label  in zip([2,1],[' - Starlink 1.0', ' - Updated Starlink']):
        for i in range(0,3):
            source = Locations[sources[i]]
            destination = Locations[destinations[i]]
            GCRLatency = 2*calcGCR(source, destination)/(300E6/1.47)
            print(GCRLatency)
            rtts = []
            rts = []
            hops = []
            print('Calculating RTTs: ' +str(sources[i])+' -> '+str(destinations[i]))
            calc_times = []
            times = np.arange(0,limit,1)
            for j in tqdm(times):
                # try:
                    path_len, path, positions, time_difference, tot_time = calcPath(phasenum, source, destination, j)
                    # rtts.append(np.round(2*(rtt/300E6),3))
                    # if j%10==0:
                    calc_times.append(tot_time)
                    # rtts.append(np.round(2*(path_len/300E6)/GCRLatency,3))
                    rtts.append(2*path_len/300E3)
                    hops.append(int(len(path)+2))
                # except:
                #     times = np.delete(times, j)
                #     pass
            # print(calc_times)
            print(times[rtts.index(max(rtts))])
            print(times[rtts.index(min(rtts))])
            print(rtts)
            # ax.hlines(internetlatencys[i]/GCRLatency, xmin=0, xmax=limit, color=colours[i], linestyle='dashed', linewidth=2, label = leg[i]+' - Terrestrial')
            # ax[1].plot(times, hops, color=colours[i], linewidth=2)
            # ax.hlines(1, xmin=0, xmax=limit, color='grey', linestyle='dashed', linewidth=1, label='_nolegend_')
            ax.plot(times, rtts, linewidth=2, label=leg[i]+label)
        # ax[1].plot(np.arange(0,180,1), hops)
    # ax.legend(['NYC->LON - Satellites', 'NYC->LON - Terrestrial', 'SFO-LON - Satellites','SFO-LON - Terrestrial', 'LON-SIN - Satellites', 'LON-SIN - Terrestrial'], loc='center', bbox_to_anchor=(0.5, 1.03), ncol=3)
    ax.legend(ncol=2, fontsize=SUBPLOT_FONT_SIZE)
    plt.savefig('figs/exp2/bothexp.pdf')
    plt.show()

def plotOffsets(phasenum):
    phase_offsets = np.arange(0,Phases['Planes'][phasenum-1],1)
    min_distances= pck.load(open('data/'+str(int(Phases['Altitude'][phasenum-1]/1E3))+'/offsets.pck', 'rb'))
    # [5979.912788661537, 22122.382616707047, 42552.37948693344, 4975.522871014899, 28040.008756062394, 17937.123265451515, 4975.522871014899, 12210.0, 41719.0040628969, 5550.0, 23183.004823361065, 5550.0, 6770.805907718671, 17977.174527717674, 41719.0040628969, 3519.2368718231332, 18974.43840117588, 7860.207121951613, 1113.1999999989876, 12996.596779156924, 16978.85763412786, 1113.2000000005696, 18974.438401175743, 11619.394304351063, 6679.200000000254, 20668.029007140434, 17235.136432299772, 3519.2368718233834, 23919.651154647698, 13917.464303528925, 10080.10185662861, 18655.86624737609, 14044.565776127953, 1109.9999999997792, 7038.473743646767, 9487.21920058775, 4010.153134233235, 26848.510725178054, 15930.562029005401, 4010.153134233235, 15720.414243905021, 11004.289970734746, 3519.236871823321, 35111.41444032105, 24515.541849202382, 2483.468187837182, 11984.783018479196, 9566.81753562723, 5992.391509240187, 40320.40742651287, 16527.39916139381, 12678.692891619708, 5555.76530821685, 18356.26447401501, 4975.52287101627, 29990.66711895555, 11984.783018477434, 9951.045742031301, 10493.43658483554, 3519.236871823071, 3511.141444031831, 23238.788608705232, 12260.640857638855, 3511.141444031831, 11351.203636618628, 17845.754269293695, 7038.4737436462665, 9178.132237009137, 14640.888175246693, 14044.565776129704, 15720.414243905581, 15499.345359078947]
    print(phase_offsets, min)

    USABLE_WIDTH_mm = 180
    USABLE_HEIGHT_mm = 80
    YANK_RATIO = 0.0393701
    USABLE_WIDTH_YANK = USABLE_WIDTH_mm*YANK_RATIO
    USABLE_HEIGHT_YANK = USABLE_HEIGHT_mm*YANK_RATIO
    SUBPLOT_FONT_SIZE = 10

    fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(USABLE_WIDTH_YANK, USABLE_HEIGHT_YANK), tight_layout=True)
    ax.bar(phase_offsets[1::2], [i/1000 for i in min_distances])
    # ax.set_xticklabels([str(i) for i in odd_offsets], fontsize=SUBPLOT_FONT_SIZE)
    ax.set_xlabel('j for Phase offset (multiples of 1/72)', fontsize=SUBPLOT_FONT_SIZE)
    ax.set_ylabel('Minimum distance between satellites (km)', fontsize=SUBPLOT_FONT_SIZE)
    # plt.show()
    plt.savefig('figs/offsets'+str(int(Phases['Altitude'][phasenum-1]/1E3))+'.pdf')



def avg(x):
    return (sum(x)/len(x))

def calctimesbar():
    USABLE_WIDTH_mm = 180
    USABLE_HEIGHT_mm = 120
    YANK_RATIO = 0.0393701
    USABLE_WIDTH_YANK = USABLE_WIDTH_mm*YANK_RATIO
    USABLE_HEIGHT_YANK = USABLE_HEIGHT_mm*YANK_RATIO
    SUBPLOT_FONT_SIZE = 12

    x = [
    datetime.datetime(2011, 1, i, 0, 0) for i in range(4,22)
    ]
    print(x)
    x = date2num(x[0])

    # y = [4, 9, 2]
    # z = [1, 2, 3]
    # k = [11, 12, 13]

    y = [0.08079582949613241, 0.043934348688800945, 0.08460660119742895, 0.07008912702002483, 0.04300712875263563, 0.08279758848789884, 0.05905718666055692, 0.06109901027160624, 0.06306437687509181, 0.06032100245302051, 0.07818207049092804, 0.058964297302399056, 0.06885089342398706, 0.04770545144129232, 0.05929321901325685, 0.0458575466758694, 0.06289667281996267, 0.06283305012043422]
    rtty1 = [0.03416586924133722, 0.034157488153852514, 0.034148069752880206, 0.029567015368233068, 0.03413096673215994, 0.034123308224930586, 0.03411460990293284, 0.034107353487957064, 0.034099012825143986, 0.0337054769564533, 0.03369828610519177, 0.03369271642629434, 0.033684451351092444, 0.03512418915660787, 0.035093936366779835, 0.03505980859863955, 0.035029966390484876, 0.035000207619224115, 0.03490712602510073, 0.03488171652772201, 0.03447846259469595, 0.03448933682922571, 0.03449820168521267, 0.034509520759327325, 0.03452107407980762, 0.03453284820677997, 0.03454250085775174, 0.03455472577875006, 0.03456492814185171, 0.03457756560277351, 0.03459045782061961, 0.03460357017013342, 0.03461690918545152, 0.034628175329313275, 0.03464188222604181, 0.034223478333673805, 0.0309532293470673, 0.03096292481183327, 0.030972798638467056, 0.030982892232680886, 0.030993204882598966, 0.0310022336771677, 0.031013014853157213, 0.031023972185759023, 0.03103514901382946, 0.03104653039588326, 0.031060532987045975, 0.031072361790429315, 0.031082786762474935, 0.031095157667727184, 0.02979951237465695, 0.029829763682530087, 0.029860461195623713, 0.029893098720843003, 0.029926501780799197, 0.029958053928950155, 0.028075140300083855, 0.028088694167916445, 0.028106143437802072, 0.029395543841478074, 0.02938847458993534, 0.02937788388356179, 0.03014193504971306, 0.030147310827841188, 0.030151727555093964, 0.030157802399014222, 0.030162935969735936, 0.030169741608131285, 0.03017562333454517, 0.030183094186529293, 0.03018970762075897, 0.029796549245173318, 0.029785679530435365, 0.02625615413270975, 0.02624410526426813, 0.02623245562619622, 0.02622340241390723, 0.02621181763221472, 0.026473673752105742, 0.026459373184044097, 0.028917164752556925, 0.028912712083594184, 0.028969749358523277, 0.028963870700178092, 0.02895543417565059, 0.02895045756938676, 0.028945414152049254, 0.02898247331047574, 0.02897534900804671, 0.028968783801593487, 0.028962239080894136, 0.02856835920985171, 0.028565601424972588, 0.02856035274566571, 0.028558195848570105, 0.028556290996181573, 0.029832683204146306, 0.029828224134484344, 0.02972482798602109, 0.029721544947371916, 0.02971904927744725, 0.029688634062907324, 0.029686426987472096, 0.02858014421511031, 0.028582300775111938, 0.028584942892859237, 0.02858786061782347, 0.028590833994756076, 0.028594357810546124, 0.028598122216642517, 0.029792057320075015, 0.02979187543021935, 0.029792574178579886, 0.029793141943628372, 0.03429931095482004, 0.0342879691074481, 0.03427791647400493, 0.03426701658406436, 0.03425732225230212, 0.03424667705796505, 0.03423620978864974, 0.03422707054224484, 0.03421695947728865, 0.03420818903475759, 0.034198438501201286, 0.034188863860710496, 0.034180651984145785, 0.03417141592056089, 0.03416357026556106, 0.03415470565369292, 0.034147231562981085, 0.029532442393092707, 0.02954327890819783, 0.029554893982277047, 0.029564888191798335, 0.03126146712358642, 0.031244522584311454, 0.03122961727993901, 0.03121322766379647, 0.035138053581823404, 0.03510810115183578, 0.03507825099313938, 0.035048458303557184, 0.03501505459393712, 0.0349856227088518, 0.034956455952506245, 0.03492595464638283, 0.034429991846927216, 0.03443665633905715, 0.03444807172034237, 0.03445973713266685, 0.031385157503245484, 0.03448369365508665, 0.03449602887641287, 0.03450409145611081, 0.034516815385762616, 0.03390110934465038, 0.03393526502990855, 0.03455652705395639, 0.03400412667082611, 0.034041229866256566, 0.03407403773856549, 0.03410931594722745, 0.03414485298547163, 0.034180594061677796, 0.03421657021676274, 0.034252780852499866, 0.03428920981999102, 0.03432375308683674, 0.0343606533261875, 0.03186462485577923, 0.0318834511607197, 0.03190478513918832, 0.031924390121241805, 0.03194412314291649, 0.031964184683753755, 0.031984359562466355, 0.03616956841476273, 0.03620174698454147, 0.030085753265411998]
    calctimey = [0.45965099334716797, 0.4344658851623535, 0.4340043067932129, 0.4358339309692383, 0.43656301498413086, 0.4347188472747803, 0.4348909854888916, 0.4331939220428467, 0.4361739158630371, 0.43518996238708496, 0.4324228763580322, 0.43577075004577637, 0.43549394607543945, 0.4349029064178467, 0.43129801750183105, 0.43352794647216797, 0.43642091751098633, 0.4335801601409912, 0.43178296089172363, 0.4332456588745117, 0.4345378875732422, 0.4337172508239746, 0.43330907821655273, 0.4338541030883789, 0.4341259002685547, 0.43148374557495117, 0.4357919692993164, 0.4326620101928711, 0.43521666526794434, 0.43642091751098633, 0.43308115005493164, 0.4311861991882324, 0.4357879161834717, 0.4339761734008789, 0.4347057342529297, 0.4319288730621338, 0.4354209899902344, 0.43272995948791504, 0.43242406845092773, 0.43286585807800293, 0.43283987045288086, 0.43504834175109863, 0.43105578422546387, 0.438399076461792, 0.43351221084594727, 0.4383249282836914, 0.4346628189086914, 0.43389010429382324, 0.4329662322998047, 0.4322078227996826, 0.43460512161254883, 0.4319329261779785, 0.43375110626220703, 0.4347679615020752, 0.43677806854248047, 0.4326169490814209, 0.4339790344238281, 0.43343472480773926, 0.4349052906036377, 0.43283724784851074, 0.4347078800201416, 0.43295836448669434, 0.43532586097717285, 0.43501782417297363, 0.4350419044494629, 0.43416810035705566, 0.43147802352905273, 0.4338071346282959, 0.43417882919311523, 0.43492627143859863, 0.43120431900024414, 0.4339110851287842, 0.4348030090332031, 0.4324300289154053, 0.43747425079345703, 0.4327430725097656, 0.4335958957672119, 0.43216490745544434, 0.43487095832824707, 0.43685197830200195, 0.4368612766265869, 0.43379878997802734, 0.4382972717285156, 0.43354320526123047, 0.4327511787414551, 0.4365370273590088, 0.43155908584594727, 0.4354677200317383, 0.43415284156799316, 0.4330589771270752, 0.4305858612060547, 0.4350440502166748, 0.43300819396972656, 0.4329090118408203, 0.43172597885131836, 0.4327278137207031, 0.4318664073944092, 0.4320509433746338, 0.4348740577697754, 0.4323232173919678, 0.4369990825653076, 0.4310026168823242, 0.43535375595092773, 0.4331209659576416, 0.43453168869018555, 0.4326589107513428, 0.435621976852417, 0.43454599380493164, 0.4364922046661377, 0.4336378574371338, 0.43210411071777344, 0.4354860782623291, 0.43226003646850586, 0.43451690673828125, 0.432528018951416, 0.43538999557495117, 0.43296098709106445, 0.43659234046936035, 0.4342689514160156, 0.4323582649230957, 0.43203091621398926, 0.43619728088378906, 0.433316707611084, 0.43220996856689453, 0.43587183952331543, 0.43357133865356445, 0.4336967468261719, 0.43406200408935547, 0.4347710609436035, 0.4336400032043457, 0.4324061870574951, 0.4360640048980713, 0.4337031841278076, 0.4377772808074951, 0.43570899963378906, 0.4364171028137207, 0.44249701499938965, 0.43573570251464844, 0.4344151020050049, 0.43511271476745605, 0.4322223663330078, 0.43352174758911133, 0.43526291847229004, 0.4333629608154297, 0.4338099956512451, 0.43371009826660156, 0.4367978572845459, 0.4308810234069824, 0.43582797050476074, 0.4317631721496582, 0.43644213676452637, 0.43233323097229004, 0.43342089653015137, 0.4329371452331543, 0.4307689666748047, 0.4344370365142822, 0.4325990676879883, 0.43498873710632324, 0.43448710441589355, 0.4352378845214844, 0.43547606468200684, 0.4336256980895996, 0.4342498779296875, 0.43203306198120117, 0.4331679344177246, 0.4328598976135254, 0.43613600730895996, 0.4337770938873291, 0.43517494201660156, 0.43509626388549805, 0.4356098175048828, 0.43338608741760254, 0.4348282814025879, 0.4328489303588867, 0.43636202812194824, 0.4322011470794678, 0.43317508697509766, 0.4336578845977783, 0.4335649013519287, 0.4352891445159912]
    print(len(y))
    z = [0.061351721018629055, 0.06057338885416563, 0.0627049966827685, 0.04862773874502759, 0.06208581438409996, 0.06512582363906551, 0.045592211707585324, 0.062179977917749936, 0.05994939405533968, 0.05637871391080057, 0.05818541522889349, 0.0740211614983442, 0.05942481400567816, 0.05930329935673331, 0.05880622076758262, 0.05784075204671034, 0.05085981775752861, 0.06951374970583493]
    rttz1 = [0.0442303435689506, 0.04426286829650874, 0.044294569423233184, 0.04432773336792572, 0.04435901125633721, 0.04439218626065752, 0.04442110887527774, 0.04445156444235457, 0.042773216061247725, 0.04278168805383017, 0.04278917756602765, 0.042800087475429516, 0.042808040058227366, 0.04441181224312245, 0.044392859821526756, 0.04437174746590633, 0.044353334410539166, 0.044335088170695945, 0.04431705480319831, 0.04429929944148202, 0.04427935456721338, 0.04426390108609461, 0.0442468212941855, 0.0442299450462402, 0.044213310454492644, 0.04419690386083647, 0.04417837942830871, 0.04416232520180393, 0.044600217480088064, 0.04458869148930912, 0.04457755844737469, 0.044564977905305794, 0.044554281042647165, 0.04454122524945957, 0.044530096473818885, 0.04411174332341725, 0.04412986222714784, 0.04414761470787987, 0.04417517500513214, 0.04419320955901973, 0.044211465292857764, 0.04422999750175037, 0.04424716227947113, 0.04426613509203202, 0.044285266905382425, 0.0438940210005938, 0.04393267174640255, 0.04396766464701017, 0.044004420295564756, 0.04404142744353176, 0.04407856543091751, 0.0446241549571389, 0.04463658825933551, 0.044649210277046936, 0.0446668944132716, 0.046551471427020055, 0.044303256669142796, 0.04430464557657827, 0.04430836031396777, 0.044310341868481415, 0.0423619463713635, 0.04235542990309152, 0.0443200606892674, 0.043841704872623795, 0.04382519217125296, 0.04381018360769889, 0.04379416267790423, 0.04378009379981429, 0.04376466952369624, 0.04375081575809425, 0.04373627237481287, 0.043722967123355015, 0.0437087442734148, 0.04016753943882243, 0.04015282692042032, 0.04013859014607859, 0.04012450327201996, 0.04011044346966561, 0.038346638228900554, 0.04569759808677522, 0.04077660726180373, 0.04077944467979356, 0.04078458616872878, 0.04078981597321784, 0.040795291930146686, 0.04828316853363741, 0.04707536270092381, 0.04249973105860225, 0.04249531891476693, 0.04249149228566055, 0.04248733165702556, 0.04207075412362535, 0.04206823099151723, 0.04206616248412531, 0.042064460524378046, 0.04613594915740024, 0.04612045532171391, 0.04610537851764579, 0.0459741203482455, 0.04596053192237082, 0.04594731599724111, 0.0459257295443147, 0.04591296611798384, 0.046080136603239084, 0.04606812863196289, 0.04337504189075963, 0.04339921219296224, 0.043422813369945204, 0.043447719953846206, 0.04347292290538539, 0.04349784775820239, 0.043523547096967895, 0.0435499007510197, 0.04357590812991382, 0.04373503739722736, 0.042099128668687244, 0.04210725787723927, 0.04211218452377508, 0.04212099388595938, 0.043877024879698606, 0.0439052982641992, 0.04393590241910173, 0.04396561442079978, 0.04399681709682772, 0.04402645458058311, 0.0440571295283126, 0.04408945157275661, 0.04412074919714724, 0.04415285985170742, 0.04267828512766267, 0.04268611919473469, 0.04269457524190336, 0.04270277158818165, 0.04270998099397847, 0.04271731781108645, 0.04454352542409784, 0.044524049754322594, 0.04450488136988851, 0.04448764173452656, 0.04446642849122185, 0.044447921684577715, 0.0444295679977094, 0.04440056147658793, 0.04438016977653914, 0.04436238263813123, 0.044344837856556185, 0.044327430405686485, 0.04431217965880624, 0.04429292902409327, 0.04427627243084734, 0.04467191086271127, 0.04465785479313616, 0.04464579337379576, 0.04463393881892643, 0.0446200096363727, 0.04460867373249954, 0.04393323560348658, 0.043949840614270014, 0.04457466517497373, 0.04398199434829637, 0.04400145466531718, 0.04401894644123663, 0.04403667756902768, 0.0440546386185833, 0.044071258443041134, 0.044089648209056274, 0.044108338780442256, 0.04412727117190192, 0.044155945915104244, 0.044173692528614104, 0.04419309987302403, 0.04446527236833127, 0.04448178828565944, 0.04449364564111372, 0.04450827696636621, 0.04396364429151658, 0.04400094350349601, 0.047951309475959, 0.047998957081738514, 0.04194282335525876]
    calctimez = [0.4333682060241699, 0.4349353313446045, 0.4322018623352051, 0.43239331245422363, 0.43572402000427246, 0.43419909477233887, 0.43477821350097656, 0.43671512603759766, 0.43561291694641113, 0.4339420795440674, 0.433668851852417, 0.4346320629119873, 0.4334378242492676, 0.4348440170288086, 0.43248605728149414, 0.43254971504211426, 0.43438124656677246, 0.4343578815460205, 0.4328129291534424, 0.43383026123046875, 0.43651819229125977, 0.4338040351867676, 0.4389002323150635, 0.4335629940032959, 0.4374046325683594, 0.4335973262786865, 0.43410730361938477, 0.43552279472351074, 0.43463706970214844, 0.43598389625549316, 0.437852144241333, 0.4326207637786865, 0.43585896492004395, 0.4336557388305664, 0.4384462833404541, 0.43115901947021484, 0.43984389305114746, 0.43529415130615234, 0.43772435188293457, 0.4352879524230957, 0.434356689453125, 0.43526697158813477, 0.4335310459136963, 0.43482208251953125, 0.43587589263916016, 0.43260836601257324, 0.4352121353149414, 0.4322981834411621, 0.4356689453125, 0.43491506576538086, 0.43381810188293457, 0.4304828643798828, 0.43111491203308105, 0.43689894676208496, 0.4356811046600342, 0.4380459785461426, 0.4341158866882324, 0.43551182746887207, 0.4357597827911377, 0.43322205543518066, 0.4349379539489746, 0.4326810836791992, 0.4342482089996338, 0.43514204025268555, 0.43575215339660645, 0.4340190887451172, 0.4331779479980469, 0.4339578151702881, 0.4327712059020996, 0.4347400665283203, 0.4351317882537842, 0.4349079132080078, 0.43404197692871094, 0.4352688789367676, 0.43455982208251953, 0.43465113639831543, 0.4358978271484375, 0.4309110641479492, 0.43676185607910156, 0.4346129894256592, 0.43619465827941895, 0.43373990058898926, 0.43233799934387207, 0.4369022846221924, 0.43250083923339844, 0.43834376335144043, 0.43355703353881836, 0.43442773818969727, 0.43394970893859863, 0.4326481819152832, 0.43479013442993164, 0.44020915031433105, 0.43439507484436035, 0.43212056159973145, 0.43390798568725586, 0.4354829788208008, 0.43207621574401855, 0.4372997283935547, 0.43522191047668457, 0.4336891174316406, 0.43381810188293457, 0.43331170082092285, 0.435467004776001, 0.4333488941192627, 0.4340939521789551, 0.4331512451171875, 0.43532800674438477, 0.4340040683746338, 0.4404261112213135, 0.4327199459075928, 0.43370604515075684, 0.4353640079498291, 0.4326002597808838, 0.4363248348236084, 0.43395090103149414, 0.43512511253356934, 0.4331040382385254, 0.4353601932525635, 0.4352231025695801, 0.4329659938812256, 0.431596040725708, 0.4328498840332031, 0.43457579612731934, 0.4347071647644043, 0.4342949390411377, 0.43633198738098145, 0.4328787326812744, 0.4341709613800049, 0.43603062629699707, 0.43218088150024414, 0.4375569820404053, 0.43289923667907715, 0.4336380958557129, 0.43265485763549805, 0.43557000160217285, 0.433398962020874, 0.4321775436401367, 0.4357171058654785, 0.433657169342041, 0.43483662605285645, 0.4327819347381592, 0.43485212326049805, 0.4344799518585205, 0.43198275566101074, 0.4373800754547119, 0.4324150085449219, 0.4352147579193115, 0.4345569610595703, 0.4358639717102051, 0.43439698219299316, 0.43311119079589844, 0.43586206436157227, 0.4316902160644531, 0.4393777847290039, 0.4323289394378662, 0.4377877712249756, 0.43420910835266113, 0.4344360828399658, 0.4353773593902588, 0.43284106254577637, 0.4361569881439209, 0.4332869052886963, 0.4364039897918701, 0.43323230743408203, 0.4339566230773926, 0.4354279041290283, 0.4325528144836426, 0.435391902923584, 0.43486499786376953, 0.43404221534729004, 0.43402886390686035, 0.4361870288848877, 0.4405360221862793, 0.43529701232910156, 0.4369537830352783, 0.4348592758178711, 0.4342789649963379, 0.4340231418609619, 0.43446874618530273, 0.43443822860717773]

    k = [0.05565505048893887, 0.059293988539772136, 0.06081724869324022, 0.06031049651740973, 0.06240049696719568, 0.07005628603476749, 0.06270064601290591, 0.06313108434878459, 0.05624719926269312, 0.05812593859008972, 0.05979734828069419, 0.05870713412409119, 0.053274232730977485, 0.06687051601874765, 0.07830773649933635, 0.06670775800169025, 0.07534357605608051, 0.06596612688405856]
    rttk1 = [0.049896633231099836, 0.04987815330510705, 0.04985944835721462, 0.049841575742760436, 0.04982349604136912, 0.04980615365408909, 0.049788672095760725, 0.04977200360967477, 0.04975515345331696, 0.049739001870529966, 0.04972264631316029, 0.049707160893662, 0.049691531885460716, 0.05154950673162281, 0.05043013385574599, 0.050412608501074437, 0.050397632018000536, 0.05033780768370125, 0.05032301392056113, 0.05030845906030644, 0.05028906014595375, 0.05027485166751856, 0.050260855495778654, 0.05024445062566573, 0.05021369500327098, 0.050200177217502806, 0.05018226599486835, 0.050169817162337454, 0.050157898037421766, 0.05014389347365932, 0.05013302205745943, 0.05012261644388816, 0.050110220558863765, 0.05009860131860527, 0.05008717132954689, 0.05043737402776871, 0.05043259126647794, 0.050429700996511916, 0.0504297043317094, 0.05043036602542609, 0.05042908320066047, 0.05042906986860745, 0.05042756006926979, 0.050423986129138565, 0.0504066521461214, 0.05040931793480635, 0.05041231624991921, 0.050415781172956996, 0.05041951028727522, 0.0504211281522031, 0.05042510928069595, 0.050424582143675824, 0.05042719535722051, 0.050430223122398254, 0.050433522946232864, 0.050437373085640225, 0.04949752287517036, 0.04948452443752174, 0.049475146287749024, 0.04946497318943894, 0.04945407240466485, 0.04944434041045826, 0.05687037188614326, 0.056827408425820694, 0.05678611818576182, 0.05674328989990915, 0.05666894042315897, 0.05662658188457067, 0.056585892501252975, 0.05654662141720695, 0.05650343245063892, 0.05467022833739508, 0.054648061495533216, 0.0590473006840361, 0.05901837038699864, 0.058987310664375125, 0.05895871407810961, 0.05893029007623562, 0.0589022688674798, 0.05887416116484298, 0.05432490238157408, 0.05430353326512016, 0.05428231214629544, 0.049884835054897464, 0.04985192914663775, 0.04981965271171605, 0.049787647599951176, 0.04975547580854911, 0.049723551409110736, 0.0496921086049924, 0.049660667672879334, 0.04967977971295282, 0.049649225533526783, 0.05142416546024773, 0.051427049047504565, 0.05142890951536625, 0.051432365103172756, 0.05143485057012105, 0.051512856448539805, 0.05151605812358407, 0.051518196561179994, 0.05158384702427246, 0.05158696411690563, 0.05173106014949954, 0.051738443377076976, 0.051744891000389794, 0.05175168197976217, 0.051760034740326824, 0.051767472684466444, 0.05177663995994493, 0.049423651877115206, 0.04940130106944391, 0.04937959791122987, 0.04935891125461533, 0.05019331529602394, 0.05017072409416556, 0.050149102675106375, 0.05012723242848164, 0.050106200004240306, 0.05008484400544851, 0.050063291485293336, 0.050043707823393915, 0.05002267653101876, 0.050003728282413944, 0.04998335752744786, 0.04996387669209222, 0.049945277388516916, 0.0499262685447511, 0.04990825519720884, 0.04989000926163713, 0.048259462963605344, 0.0482562162276629, 0.04825779269071113, 0.04825879769494048, 0.04825770633122378, 0.050575475345652425, 0.050563981852952654, 0.05055066911250047, 0.050539968945128654, 0.05052156890555246, 0.050503150889363926, 0.05048753641456458, 0.05042991248437115, 0.0504102663170064, 0.050395854519586634, 0.05038164706847422, 0.05036498248608294, 0.05035116014207586, 0.050335165696286814, 0.05031910319466945, 0.050305796326356664, 0.05029276225750645, 0.05027727652253108, 0.05026463766832651, 0.05024725995480719, 0.05023495741339814, 0.050331056243571475, 0.05034012808781956, 0.05019671099227765, 0.050360749062315094, 0.050370727303832775, 0.05038137695727905, 0.05039234251247477, 0.050401109890058304, 0.05041270792975646, 0.050413336061356354, 0.050410962156027445, 0.05041165954208958, 0.050410409946026344, 0.05041223386756383, 0.050414604890042694, 0.050412526435742754, 0.05041443388178553, 0.05039479181384748, 0.05039600825866055, 0.050399917131970805, 0.050404205991899355, 0.04537271234719693, 0.04538395639221415, 0.051099146335792205]
    calctimek = [0.43558669090270996, 0.4346582889556885, 0.4347708225250244, 0.4351661205291748, 0.4340050220489502, 0.4325370788574219, 0.4343991279602051, 0.4327700138092041, 0.4339759349822998, 0.4327540397644043, 0.434067964553833, 0.4405241012573242, 0.4583570957183838, 0.4344489574432373, 0.4347240924835205, 0.4341719150543213, 0.4371223449707031, 0.4323158264160156, 0.4353346824645996, 0.4336559772491455, 0.432985782623291, 0.434154748916626, 0.43370962142944336, 0.4355509281158447, 0.4346199035644531, 0.4355919361114502, 0.4338679313659668, 0.4397885799407959, 0.43711304664611816, 0.4329521656036377, 0.43402099609375, 0.4343230724334717, 0.4325368404388428, 0.43636274337768555, 0.4323160648345947, 0.4333219528198242, 0.43460917472839355, 0.43451595306396484, 0.4334726333618164, 0.4340801239013672, 0.435805082321167, 0.4371757507324219, 0.435499906539917, 0.43409204483032227, 0.4338717460632324, 0.4350929260253906, 0.43383121490478516, 0.43326687812805176, 0.4323258399963379, 0.43691301345825195, 0.4364349842071533, 0.4333970546722412, 0.43425512313842773, 0.4329860210418701, 0.4366598129272461, 0.4322338104248047, 0.432117223739624, 0.43733692169189453, 0.4338710308074951, 0.4343390464782715, 0.43321847915649414, 0.43231773376464844, 0.4352121353149414, 0.43445730209350586, 0.4342539310455322, 0.43383193016052246, 0.4325220584869385, 0.4351823329925537, 0.4333832263946533, 0.4348630905151367, 0.43270206451416016, 0.4329509735107422, 0.43363499641418457, 0.4335057735443115, 0.4362912178039551, 0.4340322017669678, 0.433668851852417, 0.43654394149780273, 0.43442511558532715, 0.43567991256713867, 0.4324021339416504, 0.4332849979400635, 0.4346330165863037, 0.4331398010253906, 0.43535327911376953, 0.43337297439575195, 0.43308234214782715, 0.43602681159973145, 0.4323289394378662, 0.43651771545410156, 0.4380660057067871, 0.435467004776001, 0.43227505683898926, 0.4353327751159668, 0.43459510803222656, 0.4336111545562744, 0.4335510730743408, 0.43347907066345215, 0.43475890159606934, 0.43540024757385254, 0.43355298042297363, 0.43495774269104004, 0.43502187728881836, 0.43413209915161133, 0.4344139099121094, 0.43361663818359375, 0.4359920024871826, 0.4339122772216797, 0.43578314781188965, 0.43477821350097656, 0.43370819091796875, 0.43618202209472656, 0.4348561763763428, 0.4341261386871338, 0.43192601203918457, 0.434124231338501, 0.4353790283203125, 0.43402624130249023, 0.43630385398864746, 0.43479204177856445, 0.4335939884185791, 0.43438172340393066, 0.4355900287628174, 0.43546319007873535, 0.43937182426452637, 0.4353480339050293, 0.4334836006164551, 0.4331510066986084, 0.4348728656768799, 0.43344593048095703, 0.43806004524230957, 0.4352860450744629, 0.4368438720703125, 0.43397092819213867, 0.4336099624633789, 0.4354591369628906, 0.43315887451171875, 0.4343600273132324, 0.43881916999816895, 0.43604183197021484, 0.43595194816589355, 0.43386173248291016, 0.43593692779541016, 0.43436431884765625, 0.43499279022216797, 0.4366168975830078, 0.4356870651245117, 0.4358668327331543, 0.4343407154083252, 0.4369497299194336, 0.4341239929199219, 0.4334909915924072, 0.4341731071472168, 0.4331810474395752, 0.43596482276916504, 0.4340529441833496, 0.4327869415283203, 0.43454599380493164, 0.43406105041503906, 0.43444013595581055, 0.4341590404510498, 0.43402910232543945, 0.43184685707092285, 0.4330160617828369, 0.43360304832458496, 0.43219876289367676, 0.43413305282592773, 0.43240928649902344, 0.432919979095459, 0.4343130588531494, 0.4344191551208496, 0.4376339912414551, 0.4344370365142822, 0.43408679962158203, 0.431734561920166, 0.43377065658569336, 0.4353599548339844, 0.43312597274780273, 0.4335207939147949, 0.43255186080932617]
    # times  = [str(i) for i in np.arange(0,180,10)]
    # print(times)
    # ax = plt.subplot(111)
    fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(USABLE_WIDTH_YANK, USABLE_HEIGHT_YANK), tight_layout=True)

    # ax.bar(x-0.1, y, width=0.1, color='b', align='center')
    # ax.bar(x, z, width=0.1, color='r', align='center')
    # ax.bar(x+0.1, k, width=0.1, color=(192/255,128/255,255/255), align='center')
    w = 0.5
    # ax.bar(x-2*w, (1-avg(y))*100, width=0.5*w, color='b', align='center', edgecolor = 'none', label='NYC-LON')
    print(avg(calctimey),avg(rtty1))
    ax.bar(x-2*w, (avg(calctimey)/(avg(rtty1))), width=0.5*w, color='b', align='center', edgecolor = 'none', label='NYC-LON')

    # ax.bar(x, (1-avg(z))*100, width=0.5*w, color='r', align='center', edgecolor = 'none', label='SFO-LON')
    ax.bar(x, (avg(calctimez)/(avg(rttz1))), width=0.5*w, color='r', align='center', edgecolor = 'none', label='SFO-LON')

    # ax.bar(x+2*w, (1-avg(k))*100, width=0.5*w, color=(192/255,128/255,255/255), align='center', edgecolor = 'none', label='LON-SIN')
    ax.bar(x+2*w, (avg(calctimek)/(avg(rttk1))), width=0.5*w, color=(192/255,128/255,255/255), align='center', edgecolor = 'none', label='LON-SIN')

    # ax.xaxis_date()
    # ax.set_xticklabels([str(i) for i in odd_offsets], fontsize=SUBPLOT_FONT_SIZE)
    ax.set_ylabel('Time taken to find satellite/Remaining RTT', fontsize=SUBPLOT_FONT_SIZE)
    ax.set_xlabel('Route', fontsize=SUBPLOT_FONT_SIZE)
    ax.set_xticklabels([])
    ax.legend(loc='center', bbox_to_anchor=(0.5, 1.05), ncol=3, fancybox=True, shadow=True, fontsize = SUBPLOT_FONT_SIZE)

    plt.savefig('figs/calctimestotal.pdf')
    # plt.show()
# plotOffsets(1)

# calctimesbar()
# plotRTT(1)
plotbothphases(1, 180)